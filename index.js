require('dotenv').config()
const cron = require('node-cron')
const nodemailer = require('nodemailer')
const fs = require('fs')
const moment = require('moment')
const express = require('express')
const serverless = require('serverless-http')

const http = require('http')
const app = express()

const Pool = require('pg').Pool
const pool = new Pool({
    user: process.env.DB_USER,
    password: process.env.DB_PASSWD,
    database: 'postgres',
    port: 5432,
    host: process.env.DB_HOST
})


clientEmailMap = {
    'Hack the Box': {
        name: 'Debashish Chakraborty',
        vEmail: 'vhub_debashish.chakraborty@clients.stuniq.me',
        email: process.env.EMAIL,
        password: process.env.HTB_PASSWORD
    },
    'Vulnhub': {
        name: 'Iida Hisoka',
        vEmail: 'htb_iida.hisoka@clients.stuniq.me',
        email: process.env.EMAIL,
        password: process.env.HTB_PASSWORD
    }
}

const getMailOptions = (email, APPNAME, clientName, spocName, url, deadline) => {
    let mailoptions = {
        from: `${spocName} <${email}>`,
        to: "abhiram.bsn@outlook.com",
        subject: `Penetration Test Requested - ${APPNAME}`,
        html: `
        <b>Respected Sir,</b>
        <p>We have been given the following data for a penetration test, part of mandatory testing compliance before go live.</p>
        <p>
        Details are as follows:<br/><br/>
        <b>Client Name:</b> ${clientName}<br />
        <b>Application Name:</b> ${APPNAME}<br/>
        <b>URL:</b> <a href='${url}'>${url}</a> <i>(if its a generic url, then login and search for the app)</i><br/>
        </p>
        <p>Furhter, we request you to complete the testing and provide us the report by <b>${moment(deadline).format("dddd, DD MMM YYYY")}</b>, in case of any delays a prior headsup would be appreciated</p>
        <p>
        Thanks and Regards,<br/>
        <b>${spocName} </b><br/>
        <b>Deployment and QA Team</b> <br/>
        <b>${clientName}</b> <br/>
        </p>
        `
    }
    return mailoptions
}

const getMailTransporter = (email, password) => {
    const transporter = nodemailer.createTransport({
        host: 'smtp-relay.brevo.com',
        port: 587,
        auth: {
            user: email,
            pass: password
        }
    })
    return transporter
}

const getApp = () => {
    const dataFile = fs.readFileSync('./data.json')
    const jsonData = JSON.parse(dataFile)
    const randIndex = Math.floor(Math.random() * jsonData.length)
    const app = jsonData[randIndex]
    return {
        ...app,
        deadline: moment().add(14, 'd').toDate()
    }
}

const getClientDetails = (app) => {
    return clientEmailMap[app['Client Name']]
}

const sendMessage = (message) => {

}

const sendClientEmail = async () => {
    const appData = getApp();
    const {vEmail, email, name, password} = getClientDetails(appData);
    const transporter = getMailTransporter(email, password);
    const options = getMailOptions(vEmail, appData['Machine Name'], appData['Client Name'], name, appData.URL, appData.deadline)
    transporter.sendMail(options, (err, info) => {
        if (err) console.error(err)
        else console.log('New Pentest Requested, Data sent to email: ' + info.response)
    });
    pool.query("INSERT INTO applications (application_name, application_url, client, deadline, status) VALUES ($1, $2, $3, $4, $5) RETURNING *", [appData['Machine Name'], appData.URL, appData['Client Name'], new Date(appData.deadline), 'Queued'], (error, results) => {
        if (error) {
            throw error;
        }
        sendMessage(`New Application in Queue with id ${results.rows[0].id}`)
    })

}

// console.log(sendClientEmail())
app.get('/api/data', async (req, res) => {
    pool.query('SELECT * FROM applications ORDER BY created_at DESC', (error, results) => {
        if (error) {
            throw error;
        }
        return res.status(200).json(results.rows)
    })
})

app.put('/api/data/:id', async (req, res) => {
    const id = req.params.id
    const body = req.body;
    pool.query('UPDATE application SET status = $1 WHERE id = $2', [body?.status, id], (error, results) => {
        if (error) {
            throw error;
        }
        return res.status(200).json({message: 'Status Updated'})
    })
})

app.get('/api/health', (req, res) => {
    let healthcheck = {
        uptime: process.uptime(),
        message: 'OK',
        responseTime: process.hrtime(),
        timestamp: Date.now()
    }

    try {
        return res.status(200).json(healthcheck)
    } catch (error) {
        healthcheck.message = error;
        return res.status(503).json(healthcheck);
    }
})
app.get('/', (req, res) => {
    return res.sendFile(__dirname+'/files/index.html')
})

console.log('Server up and running at port 8000')
console.log(`Current Time: ${(new Date()).toTimeString()}`)
cron.schedule('0 30 12 * * *', async () => {
    console.log('Sending Pentest Mails Morning Shift')
    await sendClientEmail();
    console.log('Pentest Request Mails Sent')
});

cron.schedule('0 30 17 * * *', async () => {
    console.log('Sending Pentest Mails Evening Shift')
    await sendClientEmail();
    console.log('Pentest Request Mails Sent')
});

console.log("Cron Jobs Scheduled")

export const handler = serverless(app)

